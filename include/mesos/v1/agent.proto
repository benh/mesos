// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import "mesos/v1/mesos.proto";

package mesos.v1.agent;

option java_package = "org.apache.mesos.v1.agent";
option java_outer_classname = "Protos";

/**
 * Calls that can be sent to the agent.
 *
 * A call is described using the standard protocol buffer "union"
 * trick, see
 * https://developers.google.com/protocol-buffers/docs/techniques#union.
 */
message Call {
  // This message represents all possible calls that can be made
  // against the v1 agent API. Each call is a combination of
  // VERB + NOUN to describe the type of operation that should be
  // performed as well as what resource that operation should be
  // performed on.
  enum Type {
    UNKNOWN = 0;

    // Get the health of the agent.
    // Returns `HealthStatus`..
    CHECK_HEALTH = 1;

    // Get the flags that are used by the agent.
    // Returns `Flags`.
    GET_FLAGS = 2;

    // Get the version information of the agent.
    // Returns `Version`.
    GET_VERSION_INFO = 3;

    // Get cluster wide metrics.
    // See 'GetMetrics' for parameters.
    // Returns `Metrics`.
    GET_METRICS = 4;

    // Get the state of the cluster.
    // Returns `State`..
    GET_STATE = 5;

    // Get the current logging level in use by the logging library.
    // Returns `LoggingLevel`.
    GET_LOGGING_LEVEL = 6;

    // Dynamically changes the logging level. This can be used to
    // increase the logging level during debugging.
    // See 'SetLoggingLevel' below for parameters.
    // Returns nothing.
    SET_LOGGING_LEVEL = 7;

    // Get the list of files (e.g., agent log) that can be accessed.
    // See 'ListFiles' below for the parameters.
    // Returns `Files`.
    LIST_FILES = 8;

    // Reads the contents of the file requested.
    // See `ReadFile` below for the parameters.
    // Returns `FileContents`.
    READ_FILE = 9;

    // Get resource statistics of all the active containers.
    // Returns `ResourceStatistics`.
    GET_RESOURCE_STATISTICS = 10;

    // Gets the current resource consumption data and status for
    // active containers..
    // Returns `Containters`.
    GET_CONTAINERS = 11;
  }

  // The messages capture additional parameters for calls.

  message GetMetrics {
    optional string timeout = 1;
  }

  message SetLoggingLevel {
    required uint32 level = 1;
    required DurationInfo duration = 2;
  }

  message ListFiles {
    required string path = 1;
  }

  message ReadFile {
    required string path = 1;
    optional string offset = 2;
    optional string length = 3;
  }

  optional Type type = 1;

  optional GetMetrics get_metrics = 2;

  optional SetLoggingLevel set_logging_level = 3;

  optional ListFiles get_files = 4;
  optional ReadFile read_file = 5;
}


/**
 * Synchronous responses to all Calls (except Call::SUBSCRIBE_EVENTS) made to
 * the agent.
 */
message Response {

  enum Type {
    UNKNOWN = 0;
    HEALTH = 1;                 // See `Health` below.
    FLAGS = 2;                  // See `Flags` below.
    VERSION_INFO = 3;           // See `VersionInfo` below.
    METRICS = 4;                // See `Metrics` below.
    STATE = 5;                  // See `State` below.
    LOGGING_LEVEL = 7;          // See `LoggingLevel` below.
    FILES = 8;                  // See `Files` below.
    FILE_CONTENTS = 9;          // See `FileContents` below.
    CONTAINERS = 10;            // See `Containers` below.
  }

  message Health {
    required bool healthy = 1;
  }

  message Flags {
    message Flag {
      required string name = 1;
      required string value = 2;
    }

    repeated Flag flags = 1;
  }

  message VersionInfo {
    required string version = 1;
    required string build_date = 2;
    required string build_time = 3;
    required string build_user = 4;
    optional string git_sha = 5;
    optional string git_branch = 6;
    optional string git_tag = 7;
  }

  message Metrics {
    message Metric {
      required string key = 1;
      required double value = 2;
    }

    repeated Metric gauges = 1;
    repeated Metric counters = 2;
  }

  message State {
    // TODO(vinod): Fill in the fields.
  }

  message LoggingLevel {
    required uint32 level = 1;
  }

  message Files {
    repeated string files = 1;
  }

  message FileContents {
    repeated bytes data = 1;
  }

  message Containers {
    message Container {
      // TODO(vinod): Fill in the fields.
    }

    repeated Container containers = 1;
  }

  optional Type type = 1;

  optional Flags flags = 2;
  optional VersionInfo version_info = 3;
  optional Metrics metrics = 4;
  optional State state = 5;
  optional Files files = 7;
  optional FileContents file_contents = 8;
  optional Containers containers = 9;
}